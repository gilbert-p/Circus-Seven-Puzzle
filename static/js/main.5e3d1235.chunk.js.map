{"version":3,"sources":["logo.svg","Variables.js","components/HexagonPuzzle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","solutionToGrid","HexagonPuzzle","useState","puzzle","solution","setSolution","animationDone","setAnimationState","window","innerWidth","viewportWidth","setViewportWidth","innerHeight","viewportHeight","setViewportHeight","hexagonListMain","triangleClassnames","colorLetter","console","log","useEffect","map","hex","split","slice","gsap","fromTo","opacity","y","duration","x","ease","handleResize","addEventListener","className","style","transform","Math","min","id","hexIndex","key","triangle","borderColor","onClick","set","rotation","to","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e3d1235.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const puzzleInput = [\r\n\t'GOGYGB',\r\n\t'BGPPOR',\r\n\t'PPPPPP',\r\n\t'ROYGBP',\r\n\t'GGGGGG',\r\n\t'PROYGB',\r\n\t'PPBGOY'\r\n];\r\nexport const puzzleInput2 = [\r\n\t'GGGGGG',\r\n\t'PPBGOY',\r\n\t'PPPPPP',\r\n\t'ROYGBP',\r\n\t'PROYGB',\r\n\t'GOGYGB',\r\n\t'BGPPOR'\r\n];\r\n\r\nexport const testCaseSolved = [\r\n\t'PPBGOY',\r\n\t'PORBGP',\r\n\t'PPPPPP',\r\n\t'BPROYG',\r\n\t'GGGGGG',\r\n\t'OGYGBG',\r\n\t'YGBPRO'\r\n];\r\n\r\nexport const solutionToGrid = [\r\n\t'PPBGOY',\r\n\t'PORBGP',\r\n\t'PPPPPP',\r\n\t'BPROYG',\r\n\t'GGGGGG',\r\n\t'OGYGBG',\r\n\t'YGBPRO'\r\n];\r\n\r\nexport const puzzleTest1 = [\r\n\t'PPBGOY',\r\n\t'BGPPOR',\r\n\t'PPPPPP',\r\n\t'PROYGB',\r\n\t'GGGGGG',\r\n\t'GOGYGB',\r\n\t'PROYGB'\r\n];\r\nexport const puzzleTest2 = [\r\n\t'AAAAAA',\r\n\t'AAAAAA',\r\n\t'AAAAAA',\r\n\t'AAAAAA',\r\n\t'AAAAAA',\r\n\t'AAAAAA',\r\n\t'BBBBBB'\r\n];\r\nexport const puzzleTest3 = [\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG'\r\n];\r\nexport const puzzleTest4 = [\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG'\r\n];\r\nexport const puzzleTest5 = [\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG',\r\n\t'GGGGGG'\r\n];\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { testCaseSolved, solutionToGrid } from \"../Variables.js\";\r\nimport { gsap } from \"gsap\";\r\n\r\nconst HexagonPuzzle = () => {\r\n  const [puzzle, setPuzzle] = useState(solutionToGrid);\r\n  const [solution, setSolution] = useState([]);\r\n  const [animationDone, setAnimationState] = useState(false);\r\n  const [viewportWidth, setViewportWidth] = useState(window.innerWidth);\r\n  const [viewportHeight, setViewportHeight] = useState(window.innerHeight);\r\n  let hexagonListMain = [];\r\n\r\n  let limit = 7;\r\n\r\n  const rotateFromIndex = (list, index) => {\r\n    let newList = list.slice(index);\r\n\r\n    let tempVar = newList[0];\r\n\r\n    for (let ii = 0; ii < newList.length; ii++) {\r\n      newList[ii % newList.length] = newList[(ii + 1) % newList.length];\r\n    }\r\n    newList[newList.length - 1] = tempVar;\r\n\r\n    return list.slice(0, index).concat(newList);\r\n  };\r\n\r\n  const compareOneSide = (centerHex, prevHex) => {\r\n    let flag = false;\r\n\r\n    centerHex[0] === prevHex[0] ? (flag = true) : (flag = false);\r\n\r\n    if (flag) {\r\n      console.log(\r\n        `${centerHex} matched with ${prevHex} at ${centerHex[0]} and ${prevHex[0]}`\r\n      );\r\n    }\r\n\r\n    return flag;\r\n  };\r\n\r\n  const compareTwoSides = (centerHex, prevHex, matchingHex, iteration) => {\r\n    let flag = false;\r\n    let count = 0;\r\n    let temp = 0;\r\n\r\n    if (prevHex[prevHex.length - 1] == matchingHex[1]) {\r\n      count += 1;\r\n    }\r\n\r\n    temp = iteration - 1;\r\n    if (centerHex[temp] == matchingHex[0]) {\r\n      count += 1;\r\n    }\r\n\r\n    if (count >= 2) {\r\n      console.log(`${centerHex} matched with ${prevHex} and ${matchingHex}`);\r\n      flag = true;\r\n    }\r\n    return flag;\r\n  };\r\n\r\n  const compareThreeSides = (\r\n    centerHex,\r\n    matchingHex,\r\n    prevHex,\r\n    firstHex,\r\n    iteration\r\n  ) => {\r\n    let flag = false;\r\n    let count = 0;\r\n    let currentcurrentIndex = iteration - 1;\r\n\r\n    //compare center with matching\r\n    if (matchingHex[0] == centerHex[currentcurrentIndex]) {\r\n      count++;\r\n    }\r\n\r\n    //compare prev hex with matching hex\r\n    if (matchingHex[1] == prevHex[prevHex.length - 1]) {\r\n      count++;\r\n    }\r\n\r\n    //compare first matched hex with matching hex\r\n\r\n    if (matchingHex[matchingHex.length - 1] == firstHex[1]) {\r\n      count++;\r\n    }\r\n\r\n    count >= 3 ? (flag = true) : (flag = false);\r\n\r\n    if (count >= 3) {\r\n      console.log(\r\n        `${centerHex} matched with ${matchingHex}, ${prevHex}, and ${firstHex}`\r\n      );\r\n    }\r\n\r\n    return flag;\r\n  };\r\n\r\n  const baseCaseCheck = (solutionList, length) => {\r\n    if (solutionList.length >= length) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const checkIfSolved = (hexList) => {\r\n    let count = 0;\r\n\r\n    let centerHex = hexList[0];\r\n    let prevHex;\r\n    let matchingHex;\r\n    let firstHex;\r\n\r\n    for (let currentIndex = 0; currentIndex < 6; currentIndex++) {\r\n      switch (currentIndex) {\r\n        case 0:\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            console.log(\r\n              `${centerHex} matched with ${matchingHex} at ${centerHex[currentIndex]} and ${matchingHex[currentIndex]}`\r\n            );\r\n            count++;\r\n          }\r\n          break;\r\n        case 1:\r\n          prevHex = hexList[currentIndex];\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            if (matchingHex[1] == prevHex[5]) {\r\n              console.log(\r\n                `${centerHex} matched with ${matchingHex} at index 0, 0 and ${prevHex} matched with ${matchingHex} at 5, 1`\r\n              );\r\n              count++;\r\n            }\r\n          }\r\n          break;\r\n        case 2:\r\n          prevHex = hexList[currentIndex];\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            if (matchingHex[1] == prevHex[5]) {\r\n              console.log(\r\n                `${centerHex} matched with ${matchingHex} at index 0, 0 and ${prevHex} matched with ${matchingHex} at 5, 1`\r\n              );\r\n              count++;\r\n            }\r\n          }\r\n          break;\r\n        case 3:\r\n          prevHex = hexList[currentIndex];\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            if (matchingHex[1] == prevHex[5]) {\r\n              console.log(\r\n                `${centerHex} matched with ${matchingHex} at index 0, 0 and ${prevHex} matched with ${matchingHex} at 5, 1`\r\n              );\r\n              count++;\r\n            }\r\n          }\r\n          break;\r\n        case 4:\r\n          prevHex = hexList[currentIndex];\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            if (matchingHex[1] == prevHex[5]) {\r\n              console.log(\r\n                `${centerHex} matched with ${matchingHex} at index 0, 0 and ${prevHex} matched with ${matchingHex} at 5, 1`\r\n              );\r\n              count++;\r\n            }\r\n          }\r\n          break;\r\n        case 5:\r\n          firstHex = hexList[1];\r\n          prevHex = hexList[currentIndex];\r\n          matchingHex = hexList[currentIndex + 1];\r\n          if (centerHex[currentIndex] == matchingHex[0]) {\r\n            if (matchingHex[1] == prevHex[5]) {\r\n              if (matchingHex[5] == firstHex[1]) {\r\n                console.log(\r\n                  `${centerHex} matched with ${matchingHex} at index 0, 0 and ${prevHex} matched with ${matchingHex} at 5, 1 and ${matchingHex} matched with ${firstHex} at 5, 1`\r\n                );\r\n                count++;\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          console.log(\"Input Error\");\r\n      }\r\n    }\r\n    if (count >= 6) {\r\n      console.log(true);\r\n      return true;\r\n    }\r\n    console.log(false);\r\n    return false;\r\n  };\r\n\r\n  const rotateCounterClockwise = (list, rotationCount) => {\r\n    for (let rotations = 0; rotations < rotationCount; rotations++) {\r\n      list = rotateFromIndex(list, 0);\r\n    }\r\n    return list;\r\n  };\r\n\r\n  const adjustSolution = (list) => {\r\n    for (let hexIndex = 0; hexIndex < list.length; hexIndex++) {\r\n      switch (hexIndex) {\r\n        case 0:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 1);\r\n          break;\r\n        case 1:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 4);\r\n          break;\r\n        case 2:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 3);\r\n          break;\r\n        case 3:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 2);\r\n          break;\r\n        case 4:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 1);\r\n          break;\r\n        case 5:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 0);\r\n          break;\r\n        case 6:\r\n          list[hexIndex] = rotateCounterClockwise(list[hexIndex], 5);\r\n          break;\r\n      }\r\n    }\r\n    return list;\r\n  };\r\n\r\n  const solve = (hexagonList, hexagonIteration, isSolved) => {\r\n    if (!hexagonList) {\r\n      return;\r\n    }\r\n    console.log(hexagonList);\r\n\r\n    if (isSolved || hexagonIteration >= 7) {\r\n      console.log(\"Solved!\", hexagonList);\r\n      setSolution(hexagonList);\r\n      return isSolved;\r\n    }\r\n\r\n    //base case\r\n\r\n    //debugger;\r\n    if (hexagonIteration == 0) {\r\n      let swapMid = 0;\r\n      let currentHexagonList = hexagonList.slice();\r\n      for (; swapMid < hexagonList.length; swapMid++) {\r\n        for (let midRotations = 0; midRotations < 6; midRotations++) {\r\n          isSolved = solve(currentHexagonList, hexagonIteration + 1, isSolved);\r\n          if (isSolved) {\r\n            console.log(\"base case iteration 0\");\r\n            return isSolved;\r\n          }\r\n          currentHexagonList[0] = rotateFromIndex(currentHexagonList[0], 0);\r\n        }\r\n\r\n        /* 0th index represents the center hexagon */\r\n        currentHexagonList = rotateFromIndex(currentHexagonList, 0);\r\n        //debugger;\r\n        console.log(`Swapped Mid: ${currentHexagonList[0]}`);\r\n        console.log(\"mid swapped\", swapMid);\r\n      }\r\n\r\n      console.log(\"Mid swapped max. No Solution\");\r\n    }\r\n\r\n    if (hexagonIteration == 1) {\r\n      let currentHexagonList = hexagonList.slice();\r\n      for (\r\n        let listRotations = 0;\r\n        listRotations < currentHexagonList.length - hexagonIteration;\r\n        listRotations++\r\n      ) {\r\n        for (\r\n          let currentHexRotations = 0;\r\n          currentHexRotations < 6;\r\n          currentHexRotations++\r\n        ) {\r\n          if (\r\n            compareOneSide(\r\n              currentHexagonList[0],\r\n              currentHexagonList[hexagonIteration]\r\n            )\r\n          ) {\r\n            isSolved = solve(\r\n              currentHexagonList,\r\n              hexagonIteration + 1,\r\n              isSolved\r\n            );\r\n            console.log(\"backtracked\");\r\n            if (isSolved) {\r\n              return isSolved;\r\n            }\r\n            currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n              currentHexagonList[hexagonIteration],\r\n              0\r\n            );\r\n            //backtracking by rotating hexagon\r\n          } else {\r\n            console.log(\r\n              `Before Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n            );\r\n            currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n              currentHexagonList[hexagonIteration],\r\n              0\r\n            );\r\n            console.log(\r\n              `After Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n            );\r\n          }\r\n        }\r\n        currentHexagonList = rotateFromIndex(\r\n          currentHexagonList,\r\n          hexagonIteration\r\n        );\r\n      }\r\n    }\r\n\r\n    if (hexagonIteration > 1 && hexagonIteration < 6) {\r\n      let currentHexagonList = hexagonList.slice();\r\n      for (\r\n        let listRotations = 0;\r\n        listRotations < currentHexagonList.length - hexagonIteration;\r\n        listRotations++\r\n      ) {\r\n        for (\r\n          let currentHexRotations = 0;\r\n          currentHexRotations < 6;\r\n          currentHexRotations++\r\n        ) {\r\n          if (\r\n            compareTwoSides(\r\n              currentHexagonList[0],\r\n              currentHexagonList[hexagonIteration - 1],\r\n              currentHexagonList[hexagonIteration],\r\n              hexagonIteration\r\n            )\r\n          ) {\r\n            isSolved = solve(\r\n              currentHexagonList,\r\n              hexagonIteration + 1,\r\n              isSolved\r\n            );\r\n            if (isSolved) {\r\n              return isSolved;\r\n            }\r\n            currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n              currentHexagonList[hexagonIteration],\r\n              0\r\n            );\r\n            //backtracking by rotating hexagon\r\n          } else {\r\n            console.log(\r\n              `Before Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n            );\r\n            currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n              currentHexagonList[hexagonIteration],\r\n              0\r\n            );\r\n            console.log(\r\n              `After Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n            );\r\n          }\r\n        }\r\n\r\n        currentHexagonList = rotateFromIndex(\r\n          currentHexagonList,\r\n          hexagonIteration\r\n        );\r\n      }\r\n    }\r\n\r\n    if (hexagonIteration == 6) {\r\n      let currentHexagonList = hexagonList.slice();\r\n      for (\r\n        let currentHexRotations = 0;\r\n        currentHexRotations < 6;\r\n        currentHexRotations++\r\n      ) {\r\n        if (\r\n          compareThreeSides(\r\n            currentHexagonList[0],\r\n            currentHexagonList[hexagonIteration],\r\n            currentHexagonList[hexagonIteration - 1],\r\n            currentHexagonList[1],\r\n            hexagonIteration\r\n          )\r\n        ) {\r\n          isSolved = true;\r\n          isSolved = solve(currentHexagonList, hexagonIteration + 1, isSolved);\r\n          if (isSolved) {\r\n            return isSolved;\r\n          }\r\n          currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n            currentHexagonList[hexagonIteration],\r\n            0\r\n          );\r\n          //backtracking by rotating hexagon\r\n        } else {\r\n          console.log(\r\n            `Before Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n          );\r\n          currentHexagonList[hexagonIteration] = rotateFromIndex(\r\n            currentHexagonList[hexagonIteration],\r\n            0\r\n          );\r\n          console.log(\r\n            `After Rotation hex: ${currentHexagonList[hexagonIteration]}`\r\n          );\r\n        }\r\n      }\r\n    }\r\n    //debugger;\r\n    return isSolved;\r\n  };\r\n\r\n  const triangleClassnames = (colorLetter) => {\r\n    switch (colorLetter) {\r\n      case \"P\":\r\n        return \"#fa05d5\";\r\n      case \"O\":\r\n        return \"#ff8c00\";\r\n      case \"R\":\r\n        return \"#fa057e\";\r\n      case \"B\":\r\n        return \"#0605fa\";\r\n      case \"G\":\r\n        return \"#05fa81\";\r\n      case \"Y\":\r\n        return \"#f9fa05\";\r\n      default:\r\n        console.log(colorLetter);\r\n        console.log(\"color input invalid\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    hexagonListMain = puzzle.map((hex) => {\r\n      return hex.split(\"\");\r\n    });\r\n    // hexagonListMain = adjustSolution(hexagonListMain);\r\n    setSolution(hexagonListMain.slice());\r\n  }, []);\r\n\r\n  const animateSolution = () => {\r\n    if (!animationDone) {\r\n      gsap.to(\"#hex-0\", { rotation: 660, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-1\", { rotation: 480, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-2\", { rotation: 420, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-3\", { rotation: 600, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-4\", { rotation: 660, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-5\", { rotation: 360, duration: 3, ease: \"bounce.out\" });\r\n      gsap.to(\"#hex-6\", { rotation: 420, duration: 3, ease: \"bounce.out\" });\r\n      setAnimationState(!animationDone);\r\n    } else {\r\n      gsap.set(\"#hex-0\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-1\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-2\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-3\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-4\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-5\", { rotation: 0, duration: 3 });\r\n      gsap.set(\"#hex-6\", { rotation: 0, duration: 3 });\r\n      setAnimationState(!animationDone);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    gsap.fromTo(\r\n      \"#puzzle-title\",\r\n      { opacity: 0, y: \"50px\" },\r\n      { opacity: 1, y: \"0\", duration: 1.2 }\r\n    );\r\n    gsap.fromTo(\r\n      \"#title-underline\",\r\n      { opacity: 0, y: \"50px\" },\r\n      { opacity: 1, y: \"0\", duration: 1.2 }\r\n    );\r\n    gsap.fromTo(\r\n      \".puzzle-info\",\r\n      { opacity: 0, x: \"-150\" },\r\n      { opacity: 1, x: \"0\", duration: 2, ease: \"bounce.out\" }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      console.log(\"resized to: \", window.innerWidth, \"x\", window.innerHeight);\r\n      setViewportWidth(window.innerWidth);\r\n      setViewportHeight(window.innerHeight);\r\n\r\n      window.addEventListener(\"resize\", handleResize);\r\n\r\n      // return window.removeEventListener(\"resize\", handleResize);\r\n    }\r\n    handleResize();\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"title-content\"\r\n        style={{\r\n          transform: `scale(${\r\n            Math.min(viewportWidth / 820, viewportHeight / 820) * 1\r\n          })`,\r\n        }}>\r\n        <h1 id=\"puzzle-title\">\r\n          Circus Seven Puzzle <span id=\"title-underline\"></span>\r\n        </h1>\r\n\r\n        <div className=\"puzzle-info\">\r\n          <div className=\"info-title\">What is this?</div>\r\n          <div className=\"info-body\">\r\n            Circus Seven is a puzzle consisting of seven large hexagonal nuts,\r\n            each piece has six colours, and there is a perfect correspondence\r\n            with the colors of the puzzle.\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"hex-container\"\r\n        style={{\r\n          transform: `scale(${\r\n            Math.min(viewportWidth / 820, viewportHeight / 820) * 1\r\n          })`,\r\n        }}>\r\n        {solution.map((hex, hexIndex) => {\r\n          return (\r\n            <div className=\"hexagon\" id={`hex-${hexIndex}`} key={hex}>\r\n              {hex.map((triangle, key) => {\r\n                return (\r\n                  <div\r\n                    id={key}\r\n                    key={key}\r\n                    className={`triangle`}\r\n                    style={{\r\n                      borderColor: `${triangleClassnames(\r\n                        hex[key]\r\n                      )} transparent`,\r\n                    }}>\r\n                    {/* {triangle} */}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div id=\"solve-button\" onClick={animateSolution}>\r\n        {animationDone ? \"RESET\" : \"SOLVE\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HexagonPuzzle;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport HexagonPuzzle from \"./components/HexagonPuzzle\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"background-container\"></div>\n      <div className=\"content-container\">\n        <HexagonPuzzle />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}